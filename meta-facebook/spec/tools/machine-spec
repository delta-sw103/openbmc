#!/usr/bin/python3 -B
#
# Usually I would do this:
#   !/usr/bin/env -S python3 -B
# But, the default python3 on devservers is a managed environment for which
# the system RPM for `python3-sh` doesn't get used.

import argparse
import os
from io import IOBase
from typing import Any, Dict, List, Optional
from sh import git  # type: ignore

import yaml


def find_file(name: str, machine: argparse.Namespace) -> Optional[str]:
    base = os.path.dirname(machine.file)
    if os.path.isfile(os.path.join(base, name)):
        return os.path.join(base, name)

    common = os.path.join(os.path.dirname(os.path.abspath(base)), "common")

    for t in machine.tags:
        if os.path.isfile(os.path.join(common, t, name)):
            return os.path.join(common, t, name)

    return None


def write_title(output: IOBase, machine: argparse.Namespace) -> None:
    print(f"# OpenBMC for {machine.name}", file=output)
    print(file=output)

    print("Version: ", get_version(machine.name), file=output)
    print(file=output)

    print("Owners:\n", file=output)
    for o in machine.owner:
        print(f"- {o}", file=output)
    print(file=output)


def get_version(machine: str) -> str:
    tags: List[str] = git.tag(
        "--points-at", "HEAD", _tty_out=False
    ).splitlines()

    for t in tags:
        if machine.lower() in t:
            return t

    d: str = git.describe(
        "--dirty", "--always", "--match", f"{machine.lower()}-*"
    ).strip()
    if machine.lower() not in d:
        d = f"{machine.lower()}-{d}"

    return d


def write_section(
    section: str, output: IOBase, machine: argparse.Namespace
) -> None:
    file = find_file(f"{section.upper()}.md", machine)
    if not file:
        raise Exception(f"Unable to find section file: {section}")

    with open(file, "r") as section_file:
        contents = section_file.readlines()

    if f"expand_{section}" in globals():
        contents = globals()[f"expand_{section}"](contents, machine)

    for c in contents:
        output.write(c)

    print(file=output)


def expand_features(
    lines: List[str], machine: argparse.Namespace
) -> List[str]:

    subsection = None
    fixed = []
    tail = []

    for l in lines:
        if l.startswith("####"):

            subtitle = l[4:].strip()
            subsection = "".join(
                [x if x.isalnum() else "-" for x in subtitle.lower()]
            )

            if subsection.lower() in ["priority-legend"]:
                continue

            l = f"#### [{l[4:].strip()}](#s-{subsection})\n"
            tail.append(f"### {subtitle} {{#s-{subsection}}}\n")

            subsection_file = find_file(f"features/{subsection}.md", machine)
            if subsection_file:
                with open(subsection_file, "r") as sf:
                    tail = tail + sf.readlines() + ["\n"]
            else:
                print(f"Warning: did not find features/{subsection}.md")

        elif l.startswith("- ["):
            task = l.strip().split("**")[:-1]
            taskname = "".join(
                [x if x.isalnum() else "-" for x in task[1].lower()]
            )

            task_file = find_file(
                f"features/{subsection}/{taskname}.md", machine
            )
            if task_file:
                l = f"{task[0]}**[{task[1]}](#s-{subsection}-{taskname})**\n"
                tail.append(f"#### {task[1]} {{#s-{subsection}-{taskname}}}\n")

                with open(task_file, "r") as tf:
                    tail = tail + tf.readlines() + ["\n"]
            else:
                print(
                    f"Warning: did not find features/{subsection}/{taskname}.md"
                )

        fixed.append(l)

    return fixed + ["\n"] + tail


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--machine", help="Path to machine spec")
    parser.add_argument("-o", "--output", help="Output file")

    args = parser.parse_args()

    if not os.path.isfile(args.machine):
        raise Exception(f"Missing machine spec: {args.machine}")
    if not args.output:
        raise Exception(f"Missing output file")

    with open(args.machine, "r") as yaml_file:
        machine = argparse.Namespace(
            **yaml.safe_load(yaml_file), file=args.machine
        )

    with open(args.output, "w") as output:
        write_title(output, machine)

        for s in machine.sections:
            write_section(s, output, machine)

        print(file=output)


if __name__ == "__main__":
    main()
