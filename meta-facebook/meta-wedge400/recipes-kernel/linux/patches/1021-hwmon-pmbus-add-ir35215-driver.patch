From 148f483aa65ad407a8b21437aedc6722d9d1aaa4 Mon Sep 17 00:00:00 2001
From: Yiang Han <hya321@fb.com>
Date: Tue, 26 Jul 2022 11:38:09 -0700
Subject: [PATCH] hwmon: pmbus: add ir35215 driver

Summary:
add pmbus ir35215 driver

set page to 0 at the beginning of probe

expose vout sysfs nodes for vout setting

Test Plan:
1. check the image version

root@fboss311782526-oob:~# cat /etc/issue
OpenBMC Release wedge400-766c5fa5d3-dirty
root@fboss311782526-oob:~# uname -r
5.15.27-wedge400

2. check the corresponding device and driver installation

root@fboss311782526-oob:/sys/bus/i2c/devices/1-0047# ls -l
lrwxrwxrwx    1 root     root             0 Jul 18 16:37 driver -> ../../../../../../../../bus/i2c/drivers/ir35215
drwxr-xr-x    3 root     root             0 Jul 18 16:37 hwmon
-r--r--r--    1 root     root          4096 Jul 18 16:49 modalias
-r--r--r--    1 root     root          4096 Jul 18 16:49 name
drwxr-xr-x    2 root     root             0 Jul 18 16:49 power
lrwxrwxrwx    1 root     root             0 Jul 18 16:49 subsystem -> ../../../../../../../../bus/i2c
-rw-r--r--    1 root     root          4096 Jul 18 16:37 uevent
root@fboss311782526-oob:/sys/bus/i2c/devices/1-0047# cat name
ir35215

3. run the sensor command:
root@fboss311782526-oob:/sys/bus/i2c/devices/1-0047/hwmon/hwmon8# sensors  ir35215-*
ir35215-i2c-1-4d
Adapter: 1e78a080.i2c-bus
XP3R3V_LEFT Input Voltage:   +11.97 V  (min = +10.50 V, crit max = +14.56 V)
XP0R94V_VDDA Input Voltage:  +11.97 V  (min =  +0.06 V, crit max = +14.56 V)
XP3R3V_LEFT Output Voltage:   +3.31 V  (crit min =  +1.40 V, min =  +2.80 V)
                                       (max =  +3.60 V, crit max =  +3.80 V)
XP0R94V_VDDA Output Voltage:  +0.96 V  (crit min =  +0.50 V, min =  +0.72 V)
                                       (max =  +1.10 V, crit max =  +2.05 V)
XP3R3V_LEFT Temp:             +23.0 C  (high = +100.0 C, crit = +125.0 C)
XP0R94V_VDDA Temp:            +24.0 C  (high = +100.0 C, crit = +125.0 C)
XP3R3V_LEFT Input Power:       1.50 W
XP0R94V_VDDA Input Power:      2.50 W
XP3R3V_LEFT Output Power:      2.00 W
XP0R94V_VDDA Output Power:     2.50
XP3R3V_LEFT Input Current:    +0.12 A  (max = +30.00 A)
XP0R94V_VDDA Input Current:   +0.22 A  (max = +30.00 A)
XP3R3V_LEFT Output Current:   +0.50 A  (max = +70.00 A, crit max = +100.00 A)
XP0R94V_VDDA Output Current:  +2.50 A  (max = +70.00 A, crit max = +90.00 A)
ir35215-i2c-1-47
Adapter: 1e78a080.i2c-bus
XP3R3V_RIGHT Input Voltage:  +11.91 V  (min = +10.50 V, crit max = +14.56 V)
XP0R75V_PCIE Input Voltage:  +11.91 V  (min =  +0.06 V, crit max = +14.56 V)
XP3R3V_RIGHT Output Voltage:  +3.31 V  (crit min =  +1.40 V, min =  +2.80 V)
                                       (max =  +3.60 V, crit max =  +3.80 V)
XP0R75V_PCIE Output Voltage:  +0.75 V  (crit min =  +0.50 V, min =  +0.60 V)
                                       (max =  +0.90 V, crit max =  +2.05 V)
XP3R3V_RIGHT Temp:            +23.0 C  (high = +100.0 C, crit = +125.0 C)
XP0R75V_PCIE Temp:            +23.0 C  (high = +100.0 C, crit = +125.0 C)
XP3R3V_RIGHT Input Power:      3.00 W
XP0R75V_PCIE Input Power:    1000.00 mW
XP3R3V_RIGHT Output Power:     2.00 W
XP0R75V_PCIE Output Power:   1000.00 mW
XP3R3V_RIGHT Input Current:   +0.19 A  (max = +30.00 A)
XP0R75V_PCIE Input Current:   +0.09 A  (max = +30.00 A)

XP3R3V_RIGHT Output Current:  +0.75 A  (max = +70.00 A, crit max = +100.00 A)
XP0R75V_PCIE Output Current:  +1.50 A  (max = +70.00 A, crit max = +90.00 A)

root@fboss311782526-oob:/sys/bus/i2c/devices/1-0047/hwmon/hwmon8#

build images of wedge400 , cloudripper
load images and  run the command:
wedge_power.sh  reset -s

root@fboss311782526-oob:~# cat /etc/issue
OpenBMC Release wedge400-403570ac99-dirty
root@fboss311782526-oob:/sys/bus/i2c/devices/1-004d/hwmon/hwmon7# uname -r
5.15.27-wedge400

root@fboss311782526-oob:~# cat /sys/bus/i2c/devices/1-004d/hwmon/hwmon7/vout1_value
960
root@fboss311782526-oob:~# cat /sys/bus/i2c/devices/1-004d/hwmon/hwmon7/vout0_value
1656
root@fboss311782526-oob:~# cat /sys/bus/i2c/devices/1-004d/hwmon/hwmon7/in3_input
1656
root@fboss311782526-oob:/sys/bus/i2c/devices/1-004d/hwmon/hwmon7# cat /sys/bus/i2c/devices/1-004d/hwmon/hwmon7/in4_input
960
root@fboss311782526-oob:/sys/bus/i2c/devices/1-004d/hwmon/hwmon7# sensors ir35215-i2c-1-4d

Adapter: 1e78a080.i2c-bus
XP3R3V_LEFT Input Voltage:   +11.97 V  (min = +10.50 V, crit max = +14.56 V)
XP0R94V_VDDA Input Voltage:  +11.97 V  (min =  +0.06 V, crit max = +14.56 V)
XP3R3V_LEFT Output Voltage:   +3.31 V  (crit min =  +1.40 V, min =  +2.80 V)
                                       (max =  +3.60 V, crit max =  +3.80 V)
XP0R94V_VDDA Output Voltage:  +0.96 V  (crit min =  +0.50 V, min =  +0.72 V)
                                       (max =  +1.10 V, crit max =  +2.05 V)
XP3R3V_LEFT Temp:             +23.0 C  (high = +100.0 C, crit = +125.0 C)
XP0R94V_VDDA Temp:            +24.0 C  (high = +100.0 C, crit = +125.0 C)
XP3R3V_LEFT Input Power:       1.50 W
XP0R94V_VDDA Input Power:      2.50 W
XP3R3V_LEFT Output Power:      2.00 W
XP0R94V_VDDA Output Power:     2.50 W
XP3R3V_LEFT Input Current:    +0.12 A  (max = +30.00 A)
XP0R94V_VDDA Input Current:   +0.22 A  (max = +30.00 A)
XP3R3V_LEFT Output Current:   +0.25 A  (max = +70.00 A, crit max = +100.00 A)
XP0R94V_VDDA Output Current:  +2.50 A  (max = +70.00 A, crit max = +90.00 A)

Reviewed By: tao-ren

Differential Revision: D37945416

fbshipit-source-id: 7e08c2332cf3ff5517b11375239125e182769f54
---
 .../drivers/hwmon/pmbus/Kconfig               |   9 +
 .../drivers/hwmon/pmbus/Makefile              |   1 +
 .../drivers/hwmon/pmbus/ir35215.c             | 179 ++++++++++++++++++
 3 files changed, 189 insertions(+)
 create mode 100644 meta-aspeed/recipes-kernel/linux/files/linux-aspeed-5.15/drivers/hwmon/pmbus/ir35215.c

diff --git a/drivers/hwmon/pmbus/Kconfig b/drivers/hwmon/pmbus/Kconfig
index 19579d0c36..1471467eae 100644
--- a/drivers/hwmon/pmbus/Kconfig
+++ b/drivers/hwmon/pmbus/Kconfig
@@ -104,6 +104,15 @@ config SENSORS_INSPUR_IPSPS
 	  This driver can also be built as a module. If so, the module will
 	  be called inspur-ipsps.
 
+config SENSORS_IR35215
+       tristate "Infineon IR35215"
+       help
+         If you say yes here you get hardware monitoring support for the
+         Infineon IR35215 controller.
+
+         This driver can also be built as a module. If so, the module will
+         be called ir35215.
+
 config SENSORS_IR35221
 	tristate "Infineon IR35221"
 	help
diff --git a/drivers/hwmon/pmbus/Makefile b/drivers/hwmon/pmbus/Makefile
index a7894fdd9d..ee397164ff 100644
--- a/drivers/hwmon/pmbus/Makefile
+++ b/drivers/hwmon/pmbus/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_SENSORS_FSP_3Y)	+= fsp-3y.o
 obj-$(CONFIG_SENSORS_IBM_CFFPS)	+= ibm-cffps.o
 obj-$(CONFIG_SENSORS_DPS920AB)	+= dps920ab.o
 obj-$(CONFIG_SENSORS_INSPUR_IPSPS) += inspur-ipsps.o
+obj-$(CONFIG_SENSORS_IR35215)   += ir35215.o
 obj-$(CONFIG_SENSORS_IR35221)	+= ir35221.o
 obj-$(CONFIG_SENSORS_IR36021)	+= ir36021.o
 obj-$(CONFIG_SENSORS_IR38064)	+= ir38064.o
diff --git a/drivers/hwmon/pmbus/ir35215.c b/drivers/hwmon/pmbus/ir35215.c
new file mode 100644
index 0000000000..fcd9063214
--- /dev/null
+++ b/drivers/hwmon/pmbus/ir35215.c
@@ -0,0 +1,179 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Hardware monitoring driver for Infineon IR35215
+ *
+ * Copyright (c) 2020 Facebook Inc.
+ */
+
+#include <linux/err.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include "pmbus.h"
+
+/*
+ * Convert ir35215 output voltage from LINEAR16 format to
+ * show a real world value in milli-unit scale.
+ */
+static ssize_t ir35215_vout_value_show_page(struct i2c_client *client, int page,
+					    char *buf)
+{
+	s8 exponent;
+	long val;
+	int ret;
+
+	ret = pmbus_read_word_data(client, page, 0xff, PMBUS_READ_VOUT);
+	if (ret < 0)
+		return ret;
+
+	/* scale output voltage to milli-units( mU ), which is milli-volts( mV )
+	 * in this case.
+	 */
+	val = ((u16)ret) * 1000L;
+
+	ret = pmbus_read_byte_data(client, page, PMBUS_VOUT_MODE);
+	if (ret < 0)
+		return ret;
+
+	exponent = ((s8)(ret << 3)) >> 3;
+
+	if (exponent >= 0)
+		val <<= exponent;
+	else
+		val >>= -exponent;
+
+	return sprintf(buf, "%d\n", (u16)val);
+}
+
+static ssize_t ir35215_vout_value_store_page(struct i2c_client *client,
+					     int page, const char *buf,
+					     size_t count)
+{
+	u8 vout_mode;
+	s8 exponent;
+	u16 mantissa;
+	int ret, vout_value;
+	long val;
+
+	ret = kstrtoint(buf, 10, &vout_value);
+	if (ret)
+		return ret;
+
+	val = vout_value;
+
+	ret = pmbus_read_byte_data(client, page, PMBUS_VOUT_MODE);
+	if (ret < 0)
+		return ret;
+
+	vout_mode = ret & GENMASK(7, 5);
+	/* Support only LINEAR mode */
+	if (vout_mode > 0)
+		return -ENODEV;
+
+	/* Convert 2's complement exponent */
+	exponent = ((s8)(ret << 3)) >> 3;
+
+	/* Convert a real world value to LINEAR16 Format */
+	if (exponent >= 0)
+		val >>= exponent;
+	else
+		val <<= -exponent;
+
+	/* Convert mantissa from milli-units to units */
+	mantissa = (u16)DIV_ROUND_CLOSEST(val, 1000L);
+
+	ret = pmbus_write_word_data(client, page, PMBUS_VOUT_COMMAND, mantissa);
+
+	return (ret < 0) ? ret : count;
+}
+
+static ssize_t ir35215_vout_value_show(struct device *dev,
+				       struct device_attribute *devattr,
+				       char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	return ir35215_vout_value_show_page(client, attr->index, buf);
+}
+
+static ssize_t ir35215_vout_value_store(struct device *dev,
+					struct device_attribute *devattr,
+					const char *buf, size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	return ir35215_vout_value_store_page(client, attr->index, buf, count);
+}
+
+static SENSOR_DEVICE_ATTR_RW(vout0_value, ir35215_vout_value, 0); //PAGE 0
+static SENSOR_DEVICE_ATTR_RW(vout1_value, ir35215_vout_value, 1); //PAGE 1
+
+static struct attribute *vout_value_attrs[] = {
+	&sensor_dev_attr_vout0_value.dev_attr.attr,
+	&sensor_dev_attr_vout1_value.dev_attr.attr,
+	NULL,
+};
+
+static const struct attribute_group vout_value_group = {
+	.attrs = vout_value_attrs,
+};
+
+static const struct attribute_group *ir35215_attribute_groups[] = {
+	&vout_value_group,
+	NULL,
+};
+
+static struct pmbus_driver_info ir35215_info = {
+	.pages = 2,
+	.format[PSC_VOLTAGE_IN] = linear,
+	.format[PSC_VOLTAGE_OUT] = linear,
+	.format[PSC_CURRENT_IN] = linear,
+	.format[PSC_CURRENT_OUT] = linear,
+	.format[PSC_POWER] = linear,
+	.format[PSC_TEMPERATURE] = linear,
+	.func[0] = PMBUS_HAVE_TEMP | PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT |
+		   PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_PIN |
+		   PMBUS_HAVE_POUT | PMBUS_HAVE_STATUS_VOUT |
+		   PMBUS_HAVE_STATUS_IOUT | PMBUS_HAVE_STATUS_INPUT |
+		   PMBUS_HAVE_STATUS_TEMP,
+	.func[1] = PMBUS_HAVE_TEMP | PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT |
+		   PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_PIN |
+		   PMBUS_HAVE_POUT | PMBUS_HAVE_STATUS_VOUT |
+		   PMBUS_HAVE_STATUS_IOUT | PMBUS_HAVE_STATUS_INPUT |
+		   PMBUS_HAVE_STATUS_TEMP,
+	.groups = ir35215_attribute_groups,
+};
+
+static int ir35215_probe(struct i2c_client *client)
+{
+	/*
+	 * IR35215 devices may not stay in page 0 during device
+	 * probe which leads to probe failure (read status word failed).
+	 * So let's set the device to page 0 at the beginning.
+	 */
+	i2c_smbus_write_byte_data(client, PMBUS_PAGE, 0);
+	return pmbus_do_probe(client, &ir35215_info);
+}
+
+static const struct i2c_device_id ir35215_id[] = { { "ir35215", 0 }, {} };
+
+MODULE_DEVICE_TABLE(i2c, ir35215_id);
+
+static struct i2c_driver ir35215_driver = {
+	.driver = {
+		   .name = "ir35215",
+		   },
+	.probe_new = ir35215_probe,
+	.id_table = ir35215_id,
+};
+
+module_i2c_driver(ir35215_driver);
+
+MODULE_AUTHOR("Tao Ren <rentao.bupt@gmail.com>");
+MODULE_DESCRIPTION("PMBus driver for Infineon IR35215");
+MODULE_LICENSE("GPL");
+MODULE_IMPORT_NS(PMBUS);
-- 
2.25.1

