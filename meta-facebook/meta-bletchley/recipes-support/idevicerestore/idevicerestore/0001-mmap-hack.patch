From 9bf0abd178d7377d6569ed2ee3139e72e757d271 Mon Sep 17 00:00:00 2001
From: Potin Lai <potin.lai@quantatw.com>
Date: Fri, 5 Aug 2022 07:04:46 +0000
Subject: [PATCH 1/1] mmap hack

Signed-off-by: Potin Lai <potin.lai@quantatw.com>
---
 src/common.c         |  36 +++++++++++
 src/common.h         |  10 +++
 src/dfu.c            |  10 ++-
 src/idevicerestore.c |  36 +++++++++--
 src/idevicerestore.h |   1 +
 src/img4.c           |  53 ++++++++-------
 src/ipsw.c           |  68 ++++++++++++++++---
 src/ipsw.h           |   1 +
 src/recovery.c       |   4 +-
 src/restore.c        | 151 ++++++++++++++++++++++++++++---------------
 10 files changed, 275 insertions(+), 95 deletions(-)

diff --git a/src/common.c b/src/common.c
index 068f2dd..f8b1f0a 100644
--- a/src/common.c
+++ b/src/common.c
@@ -221,6 +221,42 @@ int read_file(const char* filename, void** data, size_t* size) {
 	return 0;
 }
 
+int read_file_mmap(const char* filename, void** data, size_t* size) {
+	size_t bytes = 0;
+	size_t length = 0;
+	FILE* file = NULL;
+	char* buffer = NULL;
+	struct stat fst;
+
+	debug("Reading data from %s\n", filename);
+
+	*size = 0;
+	*data = NULL;
+
+	file = fopen(filename, "rb");
+	if (file == NULL) {
+		error("read_file: cannot open %s: %s\n", filename, strerror(errno));
+		return -1;
+	}
+
+	if (fstat(fileno(file), &fst) < 0) {
+		error("read_file: fstat: %s\n", strerror(errno));
+		return -1;
+	}
+	length = fst.st_size;
+
+	buffer = (unsigned char *) mmap(0, length, PROT_READ, MAP_PRIVATE,  fileno(file), 0);
+	if (buffer == MAP_FAILED) {
+		error("ERROR: %s: mmap failed for %s: %s\n", __func__, filename, strerror(errno));
+		return -1;
+	}
+	fclose(file);
+
+	*size = length;
+	*data = buffer;
+	return 0;
+}
+
 void debug_plist(plist_t plist) {
 	uint32_t size = 0;
 	char* data = NULL;
diff --git a/src/common.h b/src/common.h
index 97d5f96..502e558 100644
--- a/src/common.h
+++ b/src/common.h
@@ -39,6 +39,9 @@ extern "C" {
 #include <libirecovery.h>
 #include <libimobiledevice-glue/thread.h>
 
+#include <errno.h>
+#include <sys/mman.h>
+
 #include "idevicerestore.h"
 
 #define _MODE_UNKNOWN         0
@@ -66,6 +69,12 @@ extern "C" {
 
 #define USER_AGENT_STRING "InetURL/1.0"
 
+#define free_mmap(data, size) \
+if (munmap(data, size)) { \
+	error("ERROR: %s: munmap failed: %s (%d)\n", __func__, strerror(errno), errno); \
+	return -1; \
+}
+
 struct dfu_client_t;
 struct normal_client_t;
 struct restore_client_t;
@@ -141,6 +150,7 @@ void debug(const char* format, ...);
 void debug_plist(plist_t plist);
 void print_progress_bar(double progress);
 int read_file(const char* filename, void** data, size_t* size);
+int read_file_mmap(const char* filename, void** data, size_t* size);
 int write_file(const char* filename, const void* data, size_t size);
 
 char *generate_guid(void);
diff --git a/src/dfu.c b/src/dfu.c
index cb4d2b3..60ddec4 100644
--- a/src/dfu.c
+++ b/src/dfu.c
@@ -121,6 +121,7 @@ int dfu_send_buffer(struct idevicerestore_client_t* client, unsigned char* buffe
 int dfu_send_component(struct idevicerestore_client_t* client, plist_t build_identity, const char* component)
 {
 	char* path = NULL;
+	bool is_mmap_data = true;
 
 	// Use a specific TSS ticket for the Ap,LocalPolicy component
 	plist_t tss = client->tss;
@@ -136,6 +137,7 @@ int dfu_send_component(struct idevicerestore_client_t* client, plist_t build_ide
 		component_data = malloc(sizeof(lpol_file));
 		component_size = sizeof(lpol_file);
 		memcpy(component_data, lpol_file, component_size);
+		is_mmap_data = false;
 	} else {
 		if (tss) {
 			if (tss_response_get_path_by_entry(tss, component, &path) < 0) {
@@ -150,7 +152,7 @@ int dfu_send_component(struct idevicerestore_client_t* client, plist_t build_ide
 			}
 		}
 
-		if (extract_component(client->ipsw, path, &component_data, &component_size) < 0) {
+		if (extract_component_mmap(client->ipsw, path, &component_data, &component_size) < 0) {
 			error("ERROR: Unable to extract component: %s\n", component);
 			free(path);
 			return -1;
@@ -167,7 +169,11 @@ int dfu_send_component(struct idevicerestore_client_t* client, plist_t build_ide
 		free(component_data);
 		return -1;
 	}
-	free(component_data);
+	if (is_mmap_data) {
+		free_mmap(component_data, component_size);
+	} else {
+		free(component_data);
+	}
 	component_data = NULL;
 
 	if (!client->image4supported && client->build_major > 8 && !(client->flags & FLAG_CUSTOM) && !strcmp(component, "iBEC")) {
diff --git a/src/idevicerestore.c b/src/idevicerestore.c
index 23c48d5..2d24003 100644
--- a/src/idevicerestore.c
+++ b/src/idevicerestore.c
@@ -204,7 +204,7 @@ static int load_version_data(struct idevicerestore_client_t* client)
 
 	char *verbuf = NULL;
 	size_t verlen = 0;
-	read_file(version_xml, (void**)&verbuf, &verlen);
+	read_file_mmap(version_xml, (void**)&verbuf, &verlen);
 
 	if (!verbuf) {
 		error("ERROR: Could not load '%s'\n", version_xml);
@@ -213,7 +213,7 @@ static int load_version_data(struct idevicerestore_client_t* client)
 
 	client->version_data = NULL;
 	plist_from_xml(verbuf, verlen, &client->version_data);
-	free(verbuf);
+	free_mmap(verbuf, verlen);
 
 	if (!client->version_data) {
 		remove(version_xml);
@@ -385,7 +385,7 @@ int idevicerestore_start(struct idevicerestore_client_t* client)
 		unsigned int wtfsize = 0;
 
 		// Prefer to get WTF file from the restore IPSW
-		ipsw_extract_to_memory(client->ipsw, wtfname, &wtftmp, &wtfsize);
+		ipsw_extract_to_memory_mmap(client->ipsw, wtfname, &wtftmp, &wtfsize);
 		if (!wtftmp) {
 			// update version data (from cache, or apple if too old)
 			load_version_data(client);
@@ -424,7 +424,7 @@ int idevicerestore_start(struct idevicerestore_client_t* client)
 				download_to_file(s_wtfurl, wtfipsw, 0);
 			}
 
-			ipsw_extract_to_memory(wtfipsw, wtfname, &wtftmp, &wtfsize);
+			ipsw_extract_to_memory_mmap(wtfipsw, wtfname, &wtftmp, &wtfsize);
 			if (!wtftmp) {
 				error("ERROR: Could not extract WTF\n");
 			}
@@ -438,7 +438,7 @@ int idevicerestore_start(struct idevicerestore_client_t* client)
 		}
 		dfu_client_free(client);
 
-		free(wtftmp);
+		free_mmap(wtftmp, wtfsize);
 
 		cond_wait_timeout(&client->device_event_cond, &client->device_event_mutex, 10000);
 		if (client->mode != MODE_DFU || (client->flags & FLAG_QUIT)) {
@@ -708,7 +708,7 @@ int idevicerestore_start(struct idevicerestore_client_t* client)
 			char *files[16];
 			char *fmanifest = NULL;
 			uint32_t msize = 0;
-			if (ipsw_extract_to_memory(client->ipsw, tmpstr, (unsigned char**)&fmanifest, &msize) < 0) {
+			if (ipsw_extract_to_memory_mmap(client->ipsw, tmpstr, (unsigned char**)&fmanifest, &msize) < 0) {
 				error("ERROR: could not extract %s from IPSW\n", tmpstr);
 				free(build_identity);
 				return -1;
@@ -723,7 +723,7 @@ int idevicerestore_start(struct idevicerestore_client_t* client)
 				}
 				tok = strtok(NULL, "\r\n");
 			}
-			free(fmanifest);
+			free_mmap(fmanifest, msize);
 
 			manifest = plist_new_dict();
 
@@ -2559,6 +2559,28 @@ int extract_component(const char* ipsw, const char* path, unsigned char** compon
 	return 0;
 }
 
+int extract_component_mmap(const char* ipsw, const char* path, unsigned char** component_data, unsigned int* component_size)
+{
+	char* component_name = NULL;
+	if (!ipsw || !path || !component_data || !component_size) {
+		return -1;
+	}
+
+	component_name = strrchr(path, '/');
+	if (component_name != NULL)
+		component_name++;
+	else
+		component_name = (char*) path;
+
+	info("Extracting %s (%s)...\n", component_name, path);
+	if (ipsw_extract_to_memory_mmap(ipsw, path, component_data, component_size) < 0) {
+		error("ERROR: Unable to extract %s from %s\n", component_name, ipsw);
+		return -1;
+	}
+
+	return 0;
+}
+
 int personalize_component(const char *component_name, const unsigned char* component_data, unsigned int component_size, plist_t tss_response, unsigned char** personalized_component, unsigned int* personalized_component_size)
 {
 	unsigned char* component_blob = NULL;
diff --git a/src/idevicerestore.h b/src/idevicerestore.h
index 8a5736f..4c7892d 100644
--- a/src/idevicerestore.h
+++ b/src/idevicerestore.h
@@ -113,6 +113,7 @@ int build_identity_has_component(plist_t build_identity, const char* component);
 int build_identity_get_component_path(plist_t build_identity, const char* component, char** path);
 int ipsw_extract_filesystem(const char* ipsw, plist_t build_identity, char** filesystem);
 int extract_component(const char* ipsw, const char* path, unsigned char** component_data, unsigned int* component_size);
+int extract_component_mmap(const char* ipsw, const char* path, unsigned char** component_data, unsigned int* component_size);
 int personalize_component(const char *component, const unsigned char* component_data, unsigned int component_size, plist_t tss_response, unsigned char** personalized_component, unsigned int* personalized_component_size);
 int get_preboard_manifest(struct idevicerestore_client_t* client, plist_t build_identity, plist_t* manifest);
 
diff --git a/src/img4.c b/src/img4.c
index 609e80b..799bbfb 100644
--- a/src/img4.c
+++ b/src/img4.c
@@ -392,36 +392,13 @@ int img4_stitch_component(const char* component_name, const unsigned char* compo
 	unsigned int content_size;
 	unsigned char* outbuf;
 	unsigned char* p;
+	unsigned char* p_data;
 
 	if (!component_name || !component_data || component_size == 0 || !blob || blob_size == 0 || !img4_data || !img4_size) {
 		return -1;
 	}
 
 	info("Personalizing IMG4 component %s...\n", component_name);
-	/* first we need check if we have to change the tag for the given component */
-	const void *tag = asn1_find_element(1, ASN1_IA5_STRING, component_data);
-	if (tag) {
-		debug("Tag found\n");
-		if (strcmp(component_name, "RestoreKernelCache") == 0) {
-			memcpy((void*)tag, "rkrn", 4);
-		} else if (strcmp(component_name, "RestoreDeviceTree") == 0) {
-			memcpy((void*)tag, "rdtr", 4);
-		} else if (strcmp(component_name, "RestoreSEP") == 0) {
-			memcpy((void*)tag, "rsep", 4);
-		} else if (strcmp(component_name, "RestoreLogo") == 0) {
-			memcpy((void*)tag, "rlgo", 4);
-		} else if (strcmp(component_name, "RestoreTrustCache") == 0) {
-			memcpy((void*)tag, "rtsc", 4);
-		} else if (strcmp(component_name, "RestoreDCP") == 0) {
-			memcpy((void*)tag, "rdcp", 4);
-		} else if (strcmp(component_name, "Ap,RestoreTMU") == 0) {
-			memcpy((void*)tag, "rtmu", 4);
-		} else if (strcmp(component_name, "Ap,RestoreCIO") == 0) {
-			memcpy((void*)tag, "rcio", 4);
-		} else if (strcmp(component_name, "Ap,DCP2") == 0) {
-			memcpy((void*)tag, "dcp2", 4);
-		}
-	}
 
 	// create element header for the "IMG4" magic
 	asn1_create_element_header(ASN1_IA5_STRING, IMG4_MAGIC_SIZE, &magic_header, &magic_header_size);
@@ -457,6 +434,7 @@ int img4_stitch_component(const char* component_name, const unsigned char* compo
 	p += magic_header_size;
 	memcpy(p, IMG4_MAGIC, IMG4_MAGIC_SIZE);
 	p += IMG4_MAGIC_SIZE;
+	p_data = p;
 	memcpy(p, component_data, component_size);
 	p += component_size;
 	memcpy(p, blob_header, blob_header_size);
@@ -464,6 +442,33 @@ int img4_stitch_component(const char* component_name, const unsigned char* compo
 	memcpy(p, blob, blob_size);
 	p += blob_size;
 
+	/* first we need check if we have to change the tag for the given component */
+	//==========================================================================
+	const void *tag = asn1_find_element(1, ASN1_IA5_STRING, p_data);
+	if (tag) {
+		debug("Tag found\n");
+		if (strcmp(component_name, "RestoreKernelCache") == 0) {
+			memcpy((void*)tag, "rkrn", 4);
+		} else if (strcmp(component_name, "RestoreDeviceTree") == 0) {
+			memcpy((void*)tag, "rdtr", 4);
+		} else if (strcmp(component_name, "RestoreSEP") == 0) {
+			memcpy((void*)tag, "rsep", 4);
+		} else if (strcmp(component_name, "RestoreLogo") == 0) {
+			memcpy((void*)tag, "rlgo", 4);
+		} else if (strcmp(component_name, "RestoreTrustCache") == 0) {
+			memcpy((void*)tag, "rtsc", 4);
+		} else if (strcmp(component_name, "RestoreDCP") == 0) {
+			memcpy((void*)tag, "rdcp", 4);
+		} else if (strcmp(component_name, "Ap,RestoreTMU") == 0) {
+			memcpy((void*)tag, "rtmu", 4);
+		} else if (strcmp(component_name, "Ap,RestoreCIO") == 0) {
+			memcpy((void*)tag, "rcio", 4);
+		} else if (strcmp(component_name, "Ap,DCP2") == 0) {
+			memcpy((void*)tag, "dcp2", 4);
+		}
+	}
+	//==========================================================================
+
 	*img4_data = outbuf;
 	*img4_size = (p - outbuf);
 
diff --git a/src/ipsw.c b/src/ipsw.c
index 639ecf5..3c4f0c8 100644
--- a/src/ipsw.c
+++ b/src/ipsw.c
@@ -119,14 +119,14 @@ int ipsw_print_info(const char* path)
 
 	if (memcmp(&magic, "PK\x03\x04", 4) == 0) {
 		unsigned int rlen = 0;
-		if (ipsw_extract_to_memory(thepath, "BuildManifest.plist", (unsigned char**)&plist_buf, &rlen) < 0) {
+		if (ipsw_extract_to_memory_mmap(thepath, "BuildManifest.plist", (unsigned char**)&plist_buf, &rlen) < 0) {
 			error("ERROR: Failed to extract BuildManifest.plist from IPSW!\n");
 			return -1;
 		}
 		plist_len = (uint32_t)rlen;
 	} else {
 		size_t rlen = 0;
-		if (read_file(thepath, (void**)&plist_buf, &rlen) < 0) {
+		if (read_file_mmap(thepath, (void**)&plist_buf, &rlen) < 0) {
 			error("ERROR: Failed to read BuildManifest.plist!\n");
 			return -1;
 		}
@@ -135,7 +135,7 @@ int ipsw_print_info(const char* path)
 
 	plist_t manifest = NULL;
 	plist_from_memory(plist_buf, plist_len, &manifest);
-	free(plist_buf);
+	free_mmap(plist_buf, plist_len);
 
 	plist_t val;
 
@@ -699,6 +699,56 @@ int ipsw_extract_to_memory(const char* ipsw, const char* infile, unsigned char**
 	return 0;
 }
 
+int ipsw_extract_to_memory_mmap(const char* ipsw, const char* infile, unsigned char** pbuffer, unsigned int* psize)
+{
+	size_t size = 0;
+	unsigned char* buffer = NULL;
+	ipsw_archive* archive = ipsw_open(ipsw);
+	if (archive == NULL) {
+		error("ERROR: Invalid archive\n");
+		return -1;
+	}
+
+	if (archive->zip) {
+		error("ERROR: zip mode not supported\n");
+		return -1;
+	} else {
+		char *filepath = build_path(archive->path, infile);
+		struct stat fst;
+
+		if (lstat(filepath, &fst) != 0) {
+			error("ERROR: %s: stat failed for %s: %s\n", __func__, filepath, strerror(errno));
+			free(filepath);
+			ipsw_close(archive);
+			return -1;
+		}
+
+		size = fst.st_size;
+		int fd = open(filepath, O_RDONLY);
+		if(fd < 0){
+			error("ERROR: %s: open failed for %s: %s\n", __func__, filepath, strerror(errno));
+			free(filepath);
+			ipsw_close(archive);
+			return -2;
+		}
+		buffer = (unsigned char *) mmap(0, size, PROT_READ, MAP_PRIVATE, fd, 0);
+		if (buffer == MAP_FAILED) {
+			close(fd);
+			error("ERROR: %s: mmap failed for %s: %s\n", __func__, filepath, strerror(errno));
+			free(filepath);
+			ipsw_close(archive);
+			return -1;
+		}
+		close(fd);
+		free(filepath);
+	}
+	ipsw_close(archive);
+
+	*pbuffer = buffer;
+	*psize = size;
+	return 0;
+}
+
 int ipsw_extract_build_manifest(const char* ipsw, plist_t* buildmanifest, int *tss_enabled)
 {
 	unsigned int size = 0;
@@ -708,9 +758,9 @@ int ipsw_extract_build_manifest(const char* ipsw, plist_t* buildmanifest, int *t
 
 	/* older devices don't require personalized firmwares and use a BuildManifesto.plist */
 	if (ipsw_file_exists(ipsw, "BuildManifesto.plist")) {
-		if (ipsw_extract_to_memory(ipsw, "BuildManifesto.plist", &data, &size) == 0) {
+		if (ipsw_extract_to_memory_mmap(ipsw, "BuildManifesto.plist", &data, &size) == 0) {
 			plist_from_xml((char*)data, size, buildmanifest);
-			free(data);
+			free_mmap(data, size);
 			return 0;
 		}
 	}
@@ -719,10 +769,10 @@ int ipsw_extract_build_manifest(const char* ipsw, plist_t* buildmanifest, int *t
 	size = 0;
 
 	/* whereas newer devices do not require personalized firmwares and use a BuildManifest.plist */
-	if (ipsw_extract_to_memory(ipsw, "BuildManifest.plist", &data, &size) == 0) {
+	if (ipsw_extract_to_memory_mmap(ipsw, "BuildManifest.plist", &data, &size) == 0) {
 		*tss_enabled = 1;
 		plist_from_xml((char*)data, size, buildmanifest);
-		free(data);
+		free_mmap(data, size);
 		return 0;
 	}
 
@@ -734,9 +784,9 @@ int ipsw_extract_restore_plist(const char* ipsw, plist_t* restore_plist)
 	unsigned int size = 0;
 	unsigned char* data = NULL;
 
-	if (ipsw_extract_to_memory(ipsw, "Restore.plist", &data, &size) == 0) {
+	if (ipsw_extract_to_memory_mmap(ipsw, "Restore.plist", &data, &size) == 0) {
 		plist_from_xml((char*)data, size, restore_plist);
-		free(data);
+		free_mmap(data, size);
 		return 0;
 	}
 
diff --git a/src/ipsw.h b/src/ipsw.h
index 3b5da80..97af9cf 100644
--- a/src/ipsw.h
+++ b/src/ipsw.h
@@ -42,6 +42,7 @@ int ipsw_get_file_size(const char* ipsw, const char* infile, uint64_t* size);
 int ipsw_extract_to_file(const char* ipsw, const char* infile, const char* outfile);
 int ipsw_extract_to_file_with_progress(const char* ipsw, const char* infile, const char* outfile, int print_progress);
 int ipsw_extract_to_memory(const char* ipsw, const char* infile, unsigned char** pbuffer, unsigned int* psize);
+int ipsw_extract_to_memory_mmap(const char* ipsw, const char* infile, unsigned char** pbuffer, unsigned int* psize);
 int ipsw_extract_build_manifest(const char* ipsw, plist_t* buildmanifest, int *tss_enabled);
 int ipsw_extract_restore_plist(const char* ipsw, plist_t* restore_plist);
 int ipsw_list_contents(const char* ipsw, ipsw_list_cb cb, void *ctx);
diff --git a/src/recovery.c b/src/recovery.c
index 1a9c970..222c218 100644
--- a/src/recovery.c
+++ b/src/recovery.c
@@ -283,7 +283,7 @@ int recovery_send_component(struct idevicerestore_client_t* client, plist_t buil
 
 	unsigned char* component_data = NULL;
 	unsigned int component_size = 0;
-	int ret = extract_component(client->ipsw, path, &component_data, &component_size);
+	int ret = extract_component_mmap(client->ipsw, path, &component_data, &component_size);
 	free(path);
 	if (ret < 0) {
 		error("ERROR: Unable to extract component: %s\n", component);
@@ -291,7 +291,7 @@ int recovery_send_component(struct idevicerestore_client_t* client, plist_t buil
 	}
 
 	ret = personalize_component(component, component_data, component_size, client->tss, &data, &size);
-	free(component_data);
+	free_mmap(component_data, component_size);
 	if (ret < 0) {
 		error("ERROR: Unable to get personalized component: %s\n", component);
 		return -1;
diff --git a/src/restore.c b/src/restore.c
index d51de03..9ee03fe 100644
--- a/src/restore.c
+++ b/src/restore.c
@@ -1068,7 +1068,7 @@ int restore_send_component(restored_client_t restore, struct idevicerestore_clie
 
 	unsigned char* component_data = NULL;
 	unsigned int component_size = 0;
-	int ret = extract_component(client->ipsw, path, &component_data, &component_size);
+	int ret = extract_component_mmap(client->ipsw, path, &component_data, &component_size);
 	free(path);
 	path = NULL;
 	if (ret < 0) {
@@ -1077,7 +1077,7 @@ int restore_send_component(restored_client_t restore, struct idevicerestore_clie
 	}
 
 	ret = personalize_component(component, component_data, component_size, client->tss, &data, &size);
-	free(component_data);
+	free_mmap(component_data, component_size);
 	component_data = NULL;
 	if (ret < 0) {
 		error("ERROR: Unable to get personalized component %s\n", component);
@@ -1158,7 +1158,7 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 
 	firmware_files = plist_new_dict();
 	if (ipsw_file_exists(client->ipsw, manifest_file)) {
-		ipsw_extract_to_memory(client->ipsw, manifest_file, &manifest_data, &manifest_size);
+		ipsw_extract_to_memory_mmap(client->ipsw, manifest_file, &manifest_data, &manifest_size);
 	}
 	if (manifest_data && manifest_size > 0) {
 		info("Getting firmware manifest from %s\n", manifest_file);
@@ -1172,7 +1172,8 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 			snprintf(firmware_filename, sizeof(firmware_filename), "%s/%s", firmware_path, filename);
 			plist_dict_set_item(firmware_files, compname, plist_new_string(firmware_filename));
 		}
-		free(manifest_data);
+		// free(manifest_data);
+		free_mmap(manifest_data, manifest_size);
 	} else {
 		info("Getting firmware manifest from build identity\n");
 		plist_dict_iter iter = NULL;
@@ -1229,7 +1230,7 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 	const char* component = "LLB";
 	unsigned char* component_data = NULL;
 	unsigned int component_size = 0;
-	int ret = extract_component(client->ipsw, llb_path, &component_data, &component_size);
+	int ret = extract_component_mmap(client->ipsw, llb_path, &component_data, &component_size);
 	free(llb_path);
 	if (ret < 0) {
 		error("ERROR: Unable to extract component: %s\n", component);
@@ -1237,7 +1238,7 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 	}
 
 	ret = personalize_component(component, component_data, component_size, client->tss, &llb_data, &llb_size);
-	free(component_data);
+	free_mmap(component_data, component_size);
 	component_data = NULL;
 	component_size = 0;
 	if (ret < 0) {
@@ -1283,7 +1284,7 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 		component_data = NULL;
 		unsigned int component_size = 0;
 
-		if (extract_component(client->ipsw, comppath, &component_data, &component_size) < 0) {
+		if (extract_component_mmap(client->ipsw, comppath, &component_data, &component_size) < 0) {
 			free(iter);
 			free(comp);
 			free(comppath);
@@ -1296,12 +1297,12 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 			free(iter);
 			free(comp);
 			free(comppath);
-			free(component_data);
+			free_mmap(component_data, component_size);
 			plist_free(firmware_files);
 			error("ERROR: Unable to get personalized component: %s\n", component);
 			return -1;
 		}
-		free(component_data);
+		free_mmap(component_data, component_size);
 		component_data = NULL;
 		component_size = 0;
 
@@ -1332,7 +1333,7 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 	if (build_identity_has_component(build_identity, "RestoreSEP") &&
 	    build_identity_get_component_path(build_identity, "RestoreSEP", &restore_sep_path) == 0) {
 		component = "RestoreSEP";
-		ret = extract_component(client->ipsw, restore_sep_path, &component_data, &component_size);
+		ret = extract_component_mmap(client->ipsw, restore_sep_path, &component_data, &component_size);
 		free(restore_sep_path);
 		if (ret < 0) {
 			error("ERROR: Unable to extract component: %s\n", component);
@@ -1340,7 +1341,7 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 		}
 
 		ret = personalize_component(component, component_data, component_size, client->tss, &personalized_data, &personalized_size);
-		free(component_data);
+		free_mmap(component_data, component_size);
 		component_data = NULL;
 		component_size = 0;
 		if (ret < 0) {
@@ -1357,7 +1358,7 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 	if (build_identity_has_component(build_identity, "SEP") &&
 	    build_identity_get_component_path(build_identity, "SEP", &sep_path) == 0) {
 		component = "SEP";
-		ret = extract_component(client->ipsw, sep_path, &component_data, &component_size);
+		ret = extract_component_mmap(client->ipsw, sep_path, &component_data, &component_size);
 		free(sep_path);
 		if (ret < 0) {
 			error("ERROR: Unable to extract component: %s\n", component);
@@ -1365,7 +1366,7 @@ int restore_send_nor(restored_client_t restore, struct idevicerestore_client_t*
 		}
 
 		ret = personalize_component(component, component_data, component_size, client->tss, &personalized_data, &personalized_size);
-		free(component_data);
+		free_mmap(component_data, component_size);
 		component_data = NULL;
 		component_size = 0;
 		if (ret < 0) {
@@ -1904,7 +1905,7 @@ static int restore_send_baseband_data(restored_client_t restore, struct idevicer
 	res = -1;
 
 	size_t sz = 0;
-	if (read_file(bbfwtmp, (void**)&buffer, &sz) < 0) {
+	if (read_file_mmap(bbfwtmp, (void**)&buffer, &sz) < 0) {
 		error("ERROR: could not read updated bbfw archive\n");
 		goto leave;
 	}
@@ -1912,7 +1913,7 @@ static int restore_send_baseband_data(restored_client_t restore, struct idevicer
 	// send file
 	dict = plist_new_dict();
 	plist_dict_set_item(dict, "BasebandData", plist_new_data(buffer, (uint64_t)sz));
-	free(buffer);
+	free_mmap(buffer, sz);
 	buffer = NULL;
 
 	info("Sending BasebandData now...\n");
@@ -2035,16 +2036,16 @@ static int restore_send_image_data(restored_client_t restore, struct idevicerest
 						}
 						build_identity_get_component_path(build_identity, component, &path);
 						if (path) {
-							ret = extract_component(client->ipsw, path, &component_data, &component_size);
+							ret = extract_component_mmap(client->ipsw, path, &component_data, &component_size);
 						}
 						free(path);
 						path = NULL;
 						if (ret < 0) {
 							error("ERROR: Unable to extract component: %s\n", component);
+							return -1;
 						}
-
 						ret = personalize_component(component, component_data, component_size, client->tss, &data, &size);
-						free(component_data);
+						free_mmap(component_data, component_size);
 						component_data = NULL;
 						if (ret < 0) {
 							error("ERROR: Unable to get personalized component: %s\n", component);
@@ -2117,6 +2118,7 @@ static plist_t restore_get_se_firmware_data(restored_client_t restore, struct id
 	int ret;
 	uint64_t chip_id = 0;
 	plist_t node = plist_dict_get_item(p_info, "SE,ChipID");
+
 	if (node && plist_get_node_type(node) == PLIST_UINT) {
 		plist_get_uint_val(node, &chip_id);
 	}
@@ -2142,7 +2144,7 @@ static plist_t restore_get_se_firmware_data(restored_client_t restore, struct id
 		return NULL;
 	}
 
-	ret = extract_component(client->ipsw, comp_path, &component_data, &component_size);
+	ret = extract_component_mmap(client->ipsw, comp_path, &component_data, &component_size);
 	free(comp_path);
 	comp_path = NULL;
 	if (ret < 0) {
@@ -2154,7 +2156,7 @@ static plist_t restore_get_se_firmware_data(restored_client_t restore, struct id
 	request = tss_request_new(NULL);
 	if (request == NULL) {
 		error("ERROR: Unable to create SE TSS request\n");
-		free(component_data);
+		free_mmap(component_data, component_size);
 		return NULL;
 	}
 
@@ -2176,7 +2178,7 @@ static plist_t restore_get_se_firmware_data(restored_client_t restore, struct id
 	plist_free(request);
 	if (response == NULL) {
 		error("ERROR: Unable to fetch SE ticket\n");
-		free(component_data);
+		free_mmap(component_data, component_size);
 		return NULL;
 	}
 
@@ -2187,7 +2189,7 @@ static plist_t restore_get_se_firmware_data(restored_client_t restore, struct id
 	}
 
 	plist_dict_set_item(response, "FirmwareData", plist_new_data((char*)component_data, (uint64_t) component_size));
-	free(component_data);
+	free_mmap(component_data, component_size);
 	component_data = NULL;
 	component_size = 0;
 
@@ -2347,7 +2349,7 @@ static plist_t restore_get_yonkers_firmware_data(restored_client_t restore, stru
 	}
 
 	/* now get actual component data */
-	ret = extract_component(client->ipsw, comp_path, &component_data, &component_size);
+	ret = extract_component_mmap(client->ipsw, comp_path, &component_data, &component_size);
 	free(comp_path);
 	comp_path = NULL;
 	if (ret < 0) {
@@ -2362,7 +2364,7 @@ static plist_t restore_get_yonkers_firmware_data(restored_client_t restore, stru
 	plist_dict_set_item(firmware_data, "YonkersFirmware", plist_new_data((char *)component_data, (uint64_t)component_size));
 	plist_dict_set_item(response, "FirmwareData", firmware_data);
 
-	free(component_data);
+	free_mmap(component_data, component_size);
 	component_data = NULL;
 	component_size = 0;
 
@@ -2432,7 +2434,7 @@ static plist_t restore_get_rose_firmware_data(restored_client_t restore, struct
 		error("ERROR: Unable to get path for '%s' component\n", comp_name);
 		return NULL;
 	}
-	ret = extract_component(client->ipsw, comp_path, &component_data, &component_size);
+	ret = extract_component_mmap(client->ipsw, comp_path, &component_data, &component_size);
 	free(comp_path);
 	comp_path = NULL;
 	if (ret < 0) {
@@ -2440,11 +2442,11 @@ static plist_t restore_get_rose_firmware_data(restored_client_t restore, struct
 		return NULL;
 	}
 	if (ftab_parse(component_data, component_size, &ftab, &ftag) != 0) {
-		free(component_data);
+		free_mmap(component_data, component_size);
 		error("ERROR: Failed to parse '%s' component data.\n", comp_name);
 		return NULL;
 	}
-	free(component_data);
+	free_mmap(component_data, component_size);
 	component_data = NULL;
 	component_size = 0;
 	if (ftag != 'rkos') {
@@ -2458,7 +2460,7 @@ static plist_t restore_get_rose_firmware_data(restored_client_t restore, struct
 			error("ERROR: Unable to get path for '%s' component\n", comp_name);
 			return NULL;
 		}
-		ret = extract_component(client->ipsw, comp_path, &component_data, &component_size);
+		ret = extract_component_mmap(client->ipsw, comp_path, &component_data, &component_size);
 		free(comp_path);
 		comp_path = NULL;
 		if (ret < 0) {
@@ -2469,12 +2471,12 @@ static plist_t restore_get_rose_firmware_data(restored_client_t restore, struct
 
 		ftag = 0;
 		if (ftab_parse(component_data, component_size, &rftab, &ftag) != 0) {
-			free(component_data);
+			free_mmap(component_data, component_size);
 			ftab_free(ftab);
 			error("ERROR: Failed to parse '%s' component data.\n", comp_name);
 			return NULL;
 		}
-		free(component_data);
+		free_mmap(component_data, component_size);
 		component_data = NULL;
 		component_size = 0;
 		if (ftag != 'rkos') {
@@ -2557,7 +2559,7 @@ static plist_t restore_get_veridian_firmware_data(restored_client_t restore, str
 	}
 
 	/* now get actual component data */
-	ret = extract_component(client->ipsw, comp_path, &component_data, &component_size);
+	ret = extract_component_mmap(client->ipsw, comp_path, &component_data, &component_size);
 	free(comp_path);
 	comp_path = NULL;
 	if (ret < 0) {
@@ -2571,7 +2573,7 @@ static plist_t restore_get_veridian_firmware_data(restored_client_t restore, str
 	} else {
 		plist_from_xml((const char*)component_data, component_size, &fw_map);
 	}
-	free(component_data);
+	free_mmap(component_data, component_size);
 	component_data = NULL;
 	component_size = 0;
 
@@ -2653,7 +2655,7 @@ static plist_t restore_get_tcon_firmware_data(restored_client_t restore, struct
 	}
 
 	/* now get actual component data */
-	ret = extract_component(client->ipsw, comp_path, &component_data, &component_size);
+	ret = extract_component_mmap(client->ipsw, comp_path, &component_data, &component_size);
 	free(comp_path);
 	comp_path = NULL;
 	if (ret < 0) {
@@ -2662,7 +2664,7 @@ static plist_t restore_get_tcon_firmware_data(restored_client_t restore, struct
 	}
 
 	plist_dict_set_item(response, "FirmwareData", plist_new_data((char *)component_data, (uint64_t)component_size));
-	free(component_data);
+	free_mmap(component_data, component_size);
 	component_data = NULL;
 	component_size = 0;
 
@@ -2779,7 +2781,7 @@ static plist_t restore_get_timer_firmware_data(restored_client_t restore, struct
 			error("ERROR: Unable to get path for '%s' component\n", comp_name);
 			return NULL;
 		}
-		ret = extract_component(client->ipsw, comp_path, &component_data, &component_size);
+		ret = extract_component_mmap(client->ipsw, comp_path, &component_data, &component_size);
 		free(comp_path);
 		comp_path = NULL;
 		if (ret < 0) {
@@ -2787,11 +2789,11 @@ static plist_t restore_get_timer_firmware_data(restored_client_t restore, struct
 			return NULL;
 		}
 		if (ftab_parse(component_data, component_size, &ftab, &ftag) != 0) {
-			free(component_data);
+			free_mmap(component_data, component_size);
 			error("ERROR: Failed to parse '%s' component data.\n", comp_name);
 			return NULL;
 		}
-		free(component_data);
+		free_mmap(component_data, component_size);
 		component_data = NULL;
 		component_size = 0;
 		if (ftag != 'rkos') {
@@ -2808,7 +2810,7 @@ static plist_t restore_get_timer_firmware_data(restored_client_t restore, struct
 			error("ERROR: Unable to get path for '%s' component\n", comp_name);
 			return NULL;
 		}
-		ret = extract_component(client->ipsw, comp_path, &component_data, &component_size);
+		ret = extract_component_mmap(client->ipsw, comp_path, &component_data, &component_size);
 		free(comp_path);
 		comp_path = NULL;
 		if (ret < 0) {
@@ -2819,12 +2821,12 @@ static plist_t restore_get_timer_firmware_data(restored_client_t restore, struct
 
 		ftag = 0;
 		if (ftab_parse(component_data, component_size, &rftab, &ftag) != 0) {
-			free(component_data);
+			free_mmap(component_data, component_size);
 			ftab_free(ftab);
 			error("ERROR: Failed to parse '%s' component data.\n", comp_name);
 			return NULL;
 		}
-		free(component_data);
+		free_mmap(component_data, component_size);
 		component_data = NULL;
 		component_size = 0;
 		if (ftag != 'rkos') {
@@ -3334,6 +3336,47 @@ int extract_global_manifest(struct idevicerestore_client_t* client, plist_t buil
 	return 0;
 }
 
+int extract_global_manifest_mmap(struct idevicerestore_client_t* client, plist_t build_identity, unsigned char** pmap, unsigned int* psize)
+{
+	plist_t build_info = plist_dict_get_item(build_identity, "Info");
+	if (!build_info) {
+		error("ERROR: build identity does not contain an 'Info' element\n");
+		return -1;
+	}
+
+	plist_t device_class_node = plist_dict_get_item(build_info, "DeviceClass");
+	if (!device_class_node) {
+		error("ERROR: build identity info does not contain a DeviceClass\n");
+		return -1;
+	}
+	char *device_class = NULL;
+	plist_get_string_val(device_class_node, &device_class);
+
+	char *macos_variant = NULL;
+	int ret = extract_macos_variant(build_identity, &macos_variant);
+	if (ret != 0) {
+		free(device_class);
+		return -1;
+	}
+
+	// The path of the global manifest is hardcoded. There's no pointer to in the build manifest.
+	char *ticket_path = malloc((42+strlen(macos_variant)+strlen(device_class)+1)*sizeof(char));
+	sprintf(ticket_path, "Firmware/Manifests/restore/%s/apticket.%s.im4m", macos_variant, device_class);
+
+	free(device_class);
+	free(macos_variant);
+
+	ret = ipsw_extract_to_memory_mmap(client->ipsw, ticket_path, pmap, psize);
+	if (ret != 0) {
+		free(ticket_path);
+		error("ERROR: failed to read global manifest\n");
+		return -1;
+	}
+	free(ticket_path);
+
+	return 0;
+}
+
 int restore_send_personalized_boot_object_v3(restored_client_t restore, struct idevicerestore_client_t* client, plist_t msg, plist_t build_identity)
 {
 	debug_plist(msg);
@@ -3358,22 +3401,23 @@ int restore_send_personalized_boot_object_v3(restored_client_t restore, struct i
 	plist_t dict = NULL;
 	restored_error_t restore_error = RESTORE_E_SUCCESS;
 	char *component_name = component;
+	bool is_mmap_data = true;
 
 	info("About to send %s...\n", component_name);
 
 	if (strcmp(image_name, "__GlobalManifest__") == 0) {
-		int ret = extract_global_manifest(client, build_identity, &data, &size);
+		int ret = extract_global_manifest_mmap(client, build_identity, &data, &size);
 		if (ret != 0) {
 			return -1;
 		}
 	} else if (strcmp(image_name, "__RestoreVersion__") == 0) {
-		int ret = ipsw_extract_to_memory(client->ipsw, "RestoreVersion.plist", &data, &size);
+		int ret = ipsw_extract_to_memory_mmap(client->ipsw, "RestoreVersion.plist", &data, &size);
 		if (ret != 0) {
 			error("ERROR: failed to read global manifest\n");
 			return -1;
 		}
 	} else if (strcmp(image_name, "__SystemVersion__") == 0) {
-		int ret = ipsw_extract_to_memory(client->ipsw, "SystemVersion.plist", &data, &size);
+		int ret = ipsw_extract_to_memory_mmap(client->ipsw, "SystemVersion.plist", &data, &size);
 		if (ret != 0) {
 			error("ERROR: failed to read global manifest\n");
 			return -1;
@@ -3400,7 +3444,7 @@ int restore_send_personalized_boot_object_v3(restored_client_t restore, struct i
 		// Extract component
 		unsigned char *component_data = NULL;
 		unsigned int component_size = 0;
-		int ret = extract_component(client->ipsw, path, &component_data, &component_size);
+		int ret = extract_component_mmap(client->ipsw, path, &component_data, &component_size);
 		free(path);
 		path = NULL;
 		if (ret < 0) {
@@ -3410,12 +3454,13 @@ int restore_send_personalized_boot_object_v3(restored_client_t restore, struct i
 
 		// Personalize IMG40
 		ret = personalize_component(component, component_data, component_size, client->tss, &data, &size);
-		free(component_data);
+		free_mmap(component_data, component_size);
 		component_data = NULL;
 		if (ret < 0) {
 			error("ERROR: Unable to get personalized component %s\n", component);
 			return -1;
 		}
+		is_mmap_data = false;
 	}
 
 	// Make plist
@@ -3452,7 +3497,11 @@ int restore_send_personalized_boot_object_v3(restored_client_t restore, struct i
 	}
 
 	plist_free(dict);
-	free(data);
+	if (is_mmap_data) {
+		free_mmap(data, size);
+	} else {
+		free(data);
+	}
 
 	info("Done sending %s\n", component_name);
 	return 0;
@@ -3488,18 +3537,18 @@ int restore_send_source_boot_object_v4(restored_client_t restore, struct idevice
 	info("About to send %s...\n", component_name);
 
 	if (strcmp(image_name, "__GlobalManifest__") == 0) {
-		int ret = extract_global_manifest(client, build_identity, &data, &size);
+		int ret = extract_global_manifest_mmap(client, build_identity, &data, &size);
 		if (ret != 0) {
 			return -1;
 		}
 	} else if (strcmp(image_name, "__RestoreVersion__") == 0) {
-		int ret = ipsw_extract_to_memory(client->ipsw, "RestoreVersion.plist", &data, &size);
+		int ret = ipsw_extract_to_memory_mmap(client->ipsw, "RestoreVersion.plist", &data, &size);
 		if (ret != 0) {
 			error("ERROR: failed to read global manifest\n");
 			return -1;
 		}
 	} else if (strcmp(image_name, "__SystemVersion__") == 0) {
-		int ret = ipsw_extract_to_memory(client->ipsw, "SystemVersion.plist", &data, &size);
+		int ret = ipsw_extract_to_memory_mmap(client->ipsw, "SystemVersion.plist", &data, &size);
 		if (ret != 0) {
 			error("ERROR: failed to read global manifest\n");
 			return -1;
@@ -3519,7 +3568,7 @@ int restore_send_source_boot_object_v4(restored_client_t restore, struct idevice
 			}
 		}
 
-		int ret = extract_component(client->ipsw, path, &data, &size);
+		int ret = extract_component_mmap(client->ipsw, path, &data, &size);
 		free(path);
 		path = NULL;
 		if (ret < 0) {
@@ -3562,7 +3611,7 @@ int restore_send_source_boot_object_v4(restored_client_t restore, struct idevice
 	}
 
 	plist_free(dict);
-	free(data);
+	free_mmap(data, size);
 
 	info("Done sending %s\n", component_name);
 	return 0;
-- 
2.31.1

