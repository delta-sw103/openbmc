#!/bin/bash
#
# Copyright 2014-present Facebook. All Rights Reserved.
#
# This program file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program in a file named COPYING; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA
#

. /usr/local/fbpackages/utils/ast-functions
SLED_TYPE="/mnt/data/kv_store/sled_system_conf"
I2CSET="/usr/sbin/i2cset -y "

SB_CPLD_ADDR="0x0f"
BB_CPLD_ADDR="0x0e"

SLOT=
SLOT_NUM=
I2C_NUM=

show_usage() {
  echo "Usage: recovery-bic-util [ slot1 | slot2 | slot3 | slot4 ] [-f] [ sb | bb ] <uart image path> <ipmb image path>"
  echo "-f : forced update"
  echo "Recovery update for BIC"
  echo ""
}

get_slot_num() {
  local slot_num=0
  case $1 in
    slot1)
      slot_num=1
    ;;
    slot2)
      slot_num=2
    ;;
    slot3)
      slot_num=3
    ;;
    slot4)
      slot_num=4
    ;;
  esac

  echo $slot_num
}

get_bus_num() {
  local bus=0
  case $1 in
    slot1)
      bus=4
    ;;
    slot2)
      bus=5
    ;;
    slot3)
      bus=6
    ;;
    slot4)
      bus=7
    ;;
  esac

  echo $bus
}

set_cpld_reg() {
  $I2CSET "$@"
  # Add delay to avoid timing issue
  sleep 1
}

if [ $# -gt 6 ]; then
    show_usage
    exit 255
fi

if [ "$2" = "-f" ] ; then
  force=true
  if [ "$3" = "bb" ] ; then
    component="bb_bic"
  elif [ "$3" = "sb" ] ; then
    component="bic"
  else
    echo "Component $component not supported"
    show_usage
    exit 255
  fi
  uart_image="$4"
  i2c_image="$5"
else
  force=flase
  if [ "$2" = "bb" ] ; then
    component="bb_bic"
  elif [ "$2" = "sb" ] ; then
    component="bic"
  else
    echo "Component $component not supported"
    show_usage
    exit 255
  fi
  uart_image="$3"
  i2c_image="$4"
fi

if [ -z "$uart_image" ]; then
  echo "Please provide UART image"
  show_usage
  exit 255
elif [ -z "$i2c_image" ]; then
  echo "Please provide I2C image"
  show_usage
  exit 255
fi

# Only support slot[1|2|3|4]
if [[ "$1" =~ ^(slot[1-4]{1})$ ]]; then
  SLOT=$1
else
  show_usage
  exit 255
fi

SLOT_NUM=$(get_slot_num "$SLOT")
I2C_NUM=$(get_bus_num "$SLOT")
SLED_TYPE=$(cat "$SLED_TYPE")

# Set slot UART to SB BIC
echo "Setting slot UART to SB BIC"
if [[ "$SLED_TYPE" =~ ^(Type_(8|17))$ ]]; then
  if ! [ "$SLOT" = "slot1" ]; then
    echo "$SLOT is empty"
    exit 255
  else
    # notify CPLD to set the uart src to class 2
    set_cpld_reg "$I2C_NUM" "$SB_CPLD_ADDR" 0x00 0x02
  fi
else
  if [ "$(is_server_prsnt "${SLOT_NUM}")" = "0" ]; then
    echo "The $SLOT is empty"
    exit 255
  elif [ "$(is_slot_12v_on "${SLOT_NUM}")" = "0" ]; then
    echo "The $SLOT is 12V-off"
    exit 255
  else
    # notify CPLD to set the uart src to class 1
    set_cpld_reg "$I2C_NUM" "$SB_CPLD_ADDR" 0x00 0x01
  fi
fi

# Switch UART to corresponding BIC
if [ "$component" = "bb_bic" ]; then
  set_cpld_reg "$I2C_NUM" "$SB_CPLD_ADDR" 0x01 0x04
else
  set_cpld_reg "$I2C_NUM" "$SB_CPLD_ADDR" 0x01 0x03
fi

if [ "$component" = "bb_bic" ]; then
  mb_index=$(/usr/bin/bic-util slot1 0xe0 0x2 0x9c 0x9c 0x0 0x10 0xc0 0xf0 | awk '{print $NF}')
  if [ "$mb_index" = "01" ]; then
    set_cpld_reg "$I2C_NUM" "$BB_CPLD_ADDR" 0x29 0x01 #slot1
  elif [ "$mb_index" = "03" ]; then
    set_cpld_reg "$I2C_NUM" "$BB_CPLD_ADDR" 0x29 0x02 #slot3
  else
    echo "Could not get the server board index, please enter the slot number manually (1 or 3)"
    read -r slot_num
    if [ "$slot_num" = "1" ]; then
      set_cpld_reg "$I2C_NUM" "$BB_CPLD_ADDR" 0x29 0x01
    elif [ "$slot_num" = "3" ]; then
      set_cpld_reg "$I2C_NUM" "$BB_CPLD_ADDR" 0x29 0x02
    else
      echo "Invalid slot number $slot_num, please type 1 or 3."
      exit 255
    fi
  fi
fi

# Set BIC boot from UART
echo "Setting BIC boot from UART"
if [ "$component" = "bb_bic" ]; then
  set_cpld_reg "$I2C_NUM" "$BB_CPLD_ADDR" 0x28 0x01
else
  set_cpld_reg "$I2C_NUM" "$SB_CPLD_ADDR" 0x10 0x01
fi

# set UART to 115200
/bin/stty -F "/dev/ttyS$SLOT_NUM" 115200
echo "Doing the recovery update..."

cat "$uart_image" > "/dev/ttyS$SLOT_NUM"

sleep 5

# set UART back to 57600
/bin/stty -F "/dev/ttyS$SLOT_NUM" 57600

echo "Executing the fw-util for updating bic..."
if [ $force = true ] ; then
  /usr/bin/fw-util "slot$SLOT_NUM" --force --update "$component" "$i2c_image"
else
  /usr/bin/fw-util "slot$SLOT_NUM" --update "$component" "$i2c_image"
fi

# Set BIC boot from spi
if [ "$component" = "bb_bic" ]; then
  set_cpld_reg "$I2C_NUM" "$BB_CPLD_ADDR" 0x28 0x00
else
  set_cpld_reg "$I2C_NUM" "$SB_CPLD_ADDR" 0x10 0x00
fi

echo "Power-cycling the server..."
if [ "$component" = "bb_bic" ]; then
  /usr/local/bin/power-util sled-cycle
else
  /usr/local/bin/power-util "slot$SLOT_NUM" 12V-cycle
fi

echo
echo "------------------------------------"
echo "Recovery BIC is finished!"
echo
