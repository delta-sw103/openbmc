# Copyright 2014-present Facebook. All Rights Reserved.
. /usr/local/bin/openbmc-utils.sh

KV_CMD=/usr/bin/kv

readonly BMC_ID_CLASS1=7
readonly BMC_ID_CLASS2=6
readonly DVT_REVID=5
readonly IANA_ID="0x15 0xa0 0x0"

PCA9537_ADDR="49"
PCA9555_ADDR="20"

devmem_clear_scu70_bit() {
    local val
    val=$((0x1 << $1))
    $DEVMEM 0x1E6E2004 32 $val
}

scu_addr() {
    echo $((0x1E6E2000 + 0x$1))
}

#LPC Controller, Base Address = 0x1E78_9000
lpc_addr() {
    echo $((0x1E789000 + 0x$1))
}

# Get bmc board id
get_bmc_board_id() {
  val=$(($(gpio_get_value BOARD_ID3)<<3 | $(gpio_get_value BOARD_ID2)<<2 |
    $(gpio_get_value BOARD_ID1)<<1 | $(gpio_get_value BOARD_ID0)))
  echo $val
}

get_cpld_bus() {
  local bus

  case $1 in
    1)
      bus=4
      ;;
    2)
      bus=5
      ;;
    3)
      bus=6
      ;;
    4)
      bus=7
      ;;
  esac

  echo $bus
}

# Get 1OU/2OU present status
get_m2_prsnt_sts() {
  val=$(/usr/bin/bic-util $1 0x18 0x52 0x01 0x42 0x01 0x05)
  # if BIC is no response, set val to 255
  if [[ $? -ne 0 || $val =~ BIC* ]]; then
    val=255
  else
    val=$((16#$val))
    val=$((val & 0xC))
  fi

  echo $val
}

# Disable 12V for a server board
disable_server_12V_power() {
  local reg=8

  reg=$(($reg + $1))
  /usr/sbin/i2cset -y 12 0xf $reg 0x00
}

# Enable the I2C on the specified bus
enable_server_i2c_bus() {
  local pwr_sts

  case $1 in
    1)
      pwr_sts=$(gpio_get_value PWROK_STBY_BMC_SLOT1_R)
      ;;
    2)
      pwr_sts=$(gpio_get_value PWROK_STBY_BMC_SLOT2)
      ;;
    3)
      pwr_sts=$(gpio_get_value PWROK_STBY_BMC_SLOT3_R)
      ;;
    4)
      pwr_sts=$(gpio_get_value PWROK_STBY_BMC_SLOT4)
      ;;
    *)
      pwr_sts="0"
      ;;
  esac

  if [ $pwr_sts == "1" ]; then
    gpio_set_value FM_BMC_SLOT$1_ISOLATED_EN_R 1
  fi
}

# Check to see if server is present in given slot or not
is_server_prsnt() {
  local prsnt
  PRESENT="0"
  NOT_PRESENT="1"

  if [ "$(get_bmc_board_id)" -eq "$BMC_ID_CLASS2" ]; then
    if [ $1 -eq 1 ]; then
      # class 2 slot1 is always present
      prsnt=$PRESENT
    else
      prsnt=$NOT_PRESENT
    fi
  else
    case $1 in
      1)
        prsnt=$(gpio_get_value PRSNT_MB_BMC_SLOT1_BB_N)
        ;;
      2)
        prsnt=$(gpio_get_value PRSNT_MB_SLOT2_BB_N)
        ;;
      3)
        prsnt=$(gpio_get_value PRSNT_MB_BMC_SLOT3_BB_N)
        ;;
      4)
        prsnt=$(gpio_get_value PRSNT_MB_SLOT4_BB_N)
        ;;
      *)
        prsnt=$NOT_PRESENT
        ;;
    esac
  fi
  if [ $prsnt == $PRESENT ]; then
    echo 1
  else
    echo 0
  fi
}

get_all_server_prsnt() {
  cnt=0
  for i in $(seq 1 4); do
    cnt=$((cnt + `is_server_prsnt $i`))
  done
  echo $cnt
}

set_nic_power() {
  cnt=`get_all_server_prsnt`

  if [ $cnt -eq 0 ]; then
    /usr/sbin/i2cset -y 12 0x0f 0x0f 0
    logger -t "gpiod" -p daemon.crit "NIC Power is set to VAUX"
  fi
}

read_file_retry() {
  retries=$1
  wait_time=$2
  file=$3

  for i in `seq 1 $retries`; do
    value=`cat $file`
    [ ! -z $value ] && break
    usleep $wait_time
  done

  echo $value
}

# Get slot type. 0 = server
get_slot_type() {
  #Return 0 since we only have a server
  type=0
  echo $type
}

# Get server type
# Crater Lake: 0x00
# Halfdome: 0x02
# unknown type: 0xff
get_server_type() {
  #local bus=$1
  local bus=$(get_cpld_bus "$1")
  SB_CPLD_ADDR="0x0f"
  type=$(/usr/sbin/i2cget -y $bus $SB_CPLD_ADDR 0x11)
  if [ $? -ne 0 ]; then
    # if get server type fail, return unknown server for retry or search other slot's server
    echo "0xff"
  else
    echo $type
  fi
}

# Set up VF gpio expander
set_vf_gpio() {
  local slot=$1
  local bus=$((slot+3))
  local ioexp_dev_addr=""
  local ioexp_addrs=($PCA9537_ADDR $PCA9555_ADDR)
  local ioexp_devs=("pca9537" "pca9555")
  local gpio_names=("BIC_SRST_N_IO_EXP_R_SLOT" "BIC_EXTRST_N_IO_EXP_R_SLOT" "BIC_FWSPICK_IO_EXP_SLOT")

  for _ in {1..3}; do
    for i in "${!ioexp_addrs[@]}"; do
      if i2cget -f -y $bus 0x${ioexp_addrs[$i]} 0 >/dev/null 2>&1; then
        ioexp_dev_addr=$bus-00${ioexp_addrs[$i]}
        if [ ! -L "${SYSFS_I2C_DEVICES}/$ioexp_dev_addr/driver" ]; then
          i2c_device_add $bus 0x${ioexp_addrs[$i]} ${ioexp_devs[$i]}
        fi
        break
      fi
    done
    if [ "$ioexp_dev_addr" != "" ]; then
      break
    fi
    usleep 50000
  done

  # export GPIO pins
  if [ "$ioexp_dev_addr" != "" ]; then
    for _ in {1..50}; do
      # wait for /sys/class/gpio/gpiochipxxx to be ready
      if [ "$(gpiochip_lookup_by_i2c_path $ioexp_dev_addr)" != "" ]; then
        break
      fi
      usleep 10000
    done
    for i in "${!gpio_names[@]}"; do
      if [ ! -L "${SHADOW_GPIO}/${gpio_names[$i]}$slot" ]; then
        gpio_export_by_offset $ioexp_dev_addr $i ${gpio_names[$i]}$slot >/dev/null 2>&1
      fi
    done
  fi
}

# Check to see if Server Board Present & Bridge-IC is ready
is_sb_bic_ready() {
  local ready
  local slot_num=$1
  local cpld_bus=$(($slot_num+3))

  if [[ $(is_server_prsnt $slot_num) == "0" ]]; then
    ready=0
  else
    cpld_bic_ready_out=$(i2cget -y ${cpld_bus} 0x0f 0x02)
    val=$((((16#${cpld_bic_ready_out:2}) & 0x02) >> 1))
    if [ $val -eq 1 ]; then
      ready=1
    else
      ready=0
    fi
  fi

  echo $ready
}

# Check to see if PRoT module is present
is_prot_prsnt() {
  local bus=$(get_cpld_bus $1)
  local prsnt=0
  local val

  for _ in {1..3}; do
    if val=$(/usr/sbin/i2cget -y $bus 0xf 0x23 2>/dev/null); then
      val=$((val & 0x01))
      break
    fi
    val=0xff
  done

  if [ $val -eq 0 ]; then
    prsnt=1
  fi

  echo $prsnt
}

# Check to see if slot 12v is on or not
is_slot_12v_on() {
  local pwr_sts

  case $1 in
    1)
      pwr_sts=$(gpio_get_value PWROK_STBY_BMC_SLOT1_R)
      ;;
    2)
      pwr_sts=$(gpio_get_value PWROK_STBY_BMC_SLOT2)
      ;;
    3)
      pwr_sts=$(gpio_get_value PWROK_STBY_BMC_SLOT3_R)
      ;;
    4)
      pwr_sts=$(gpio_get_value PWROK_STBY_BMC_SLOT4)
      ;;
    *)
      pwr_sts="0"
      ;;
  esac

  if [ $pwr_sts == "1" ]; then
    echo 1
  else
    echo 0
  fi
}

get_platform_stage() {
  local stage=255
  re='^0x[0-9]+$'
  for i in $(seq 1 4); do
    if [ $i -eq 1 ] || [ $i -eq 3 ]; then
      prsnt_sts=$(gpio_get_value PRSNT_MB_BMC_SLOT${i}_BB_N)
    else
      prsnt_sts=$(gpio_get_value PRSNT_MB_SLOT${i}_BB_N)
    fi
    if [ "$prsnt_sts" == "0" ]; then
      gpio_set_value FM_BMC_SLOT${i}_ISOLATED_EN_R 1
      bus=$(get_cpld_bus "$i")
      stage=$(/usr/sbin/i2cget -y $bus 0x0f 0x07)
      if ! [[ $stage =~ $re ]] ; then
        continue
      else
        stage=$((16#${stage:2:3}))
        break
      fi
    fi
  done

  echo $stage
}

# Check to see if BMC time synced
is_date_synced() {
  if [ "$($KV_CMD get date_sync)" == "1" ]; then
    echo 1
  else
    echo 0
  fi
}

# Get 2OU board type
# M.2 board: 0x01
# E1.S board: 0x02
# DPV2: 0x07
# unknown board: 0xff
function get_2ou_board_type() {
  local bus=$1
  SB_CPLD_ADDR="0x0f"
  type=$(/usr/sbin/i2cget -y $bus $SB_CPLD_ADDR 0xD)
  if [ $? -ne 0 ]; then
    # if get board type fail, return unknown board for retry or search other slot's 2OU board
    echo "0xff"
  else
    echo $type
  fi
}

# Get 1OU board type
# VF_1U = 7 (0x07)
# RF_1U = 10 (0x0A)
get_1ou_board_type() {
  local slot_str=$1
  local type_1ou
  local val

  if type_1ou=$($KV_CMD get "${slot_str}_get_1ou_type"); then
    # find kv cache
    echo "$type_1ou"
    return 0
  fi

  if type_1ou=$(get_1ou_card_type "$slot_str"); then
    echo "$type_1ou"
  elif val=$(/usr/bin/bic-util "$slot_str" 0xe0 0x02 $IANA_ID 0x05 0xe0 0xa0 $IANA_ID); then
    val=($(echo "$val" | tr ' '))
    if [ "${val[6]}" = "00" ]; then
      type_1ou=$((16#${val[10]}))
      # map board_id to card_type
      case $type_1ou in
        7)  # VF
          type_1ou=4
          ;;
        10) # RF
          type_1ou=2
          ;;
        *)  # Unknown
          type_1ou=255
          ;;
      esac
      echo "$type_1ou"
    else
      # bic reply non-completed cc code
      return 1
    fi
  else
    # bic-util command failed
    return 1
  fi

  $KV_CMD set "${slot_str}_get_1ou_type" "$type_1ou"
  return 0
}

# Get 1OU card type
# 00h - 1OU SI test card
# 01h - Expansion with 6 M.2
# 02h - Rainbow falls
# 03h - Vernal falls (TI BIC)
# 04h - Vernal falls (AST1030 BIC)
# 05h - Kahuna Falls
# 06h - Waimano falls
# 07h - Expansion with NIC
# 08h - Olmstead point EXP A
# FEh - no present card
# FFh - No expected type
get_1ou_card_type() {
  local slot_str=$1
  local card_type_1ou
  local val

  if val=$(/usr/bin/bic-util "$slot_str" 0xe0 0xa1 $IANA_ID 0x0); then
    val=($(echo "$val" | tr ' '))
    card_type_1ou=$((16#${val[4]}))
    echo "${card_type_1ou}"
  else
    # bic-util get card type command failed
    return 1
  fi

  return 0
}
