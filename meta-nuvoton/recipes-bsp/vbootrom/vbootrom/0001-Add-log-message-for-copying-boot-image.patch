From 9d11b3721c84ff7d42642c0ba258e4e8ea5479b9 Mon Sep 17 00:00:00 2001
From: Peter Delevoryas <pdel@fb.com>
Date: Sat, 16 Jul 2022 14:26:56 -0700
Subject: [PATCH] Add log message for copying boot image

Signed-off-by: Dan Zhang <dz4list@gmail.com>
---
 npcm8xx/image.c | 91 ++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 90 insertions(+), 1 deletion(-)

diff --git a/npcm8xx/image.c b/npcm8xx/image.c
index f799774..dcaacc1 100644
--- a/npcm8xx/image.c
+++ b/npcm8xx/image.c
@@ -16,7 +16,16 @@
  * limitations under the License.
  */
 
-#include <stdint.h>
+typedef unsigned char uint8_t;
+typedef unsigned int uint32_t;
+typedef unsigned long uint64_t;
+typedef unsigned long uintptr_t;
+typedef int int32_t;
+
+typedef __builtin_va_list va_list;
+#define va_arg __builtin_va_arg
+#define va_start __builtin_va_start
+#define va_end __builtin_va_end
 
 #define SPI0CS0 0x80000000
 #define CLK 0xf0801000
@@ -24,6 +33,8 @@
 #define CLK_CLKSEL  0x04
 #define CLK_CLKSEL_DEFAULT 0x1f18fc9
 #define FIU_DRD_CFG 0x00
+#define UART0 0xf0000000
+#define UART_TX 0x00
 
 /*
  * This structure must reside at offset 0x100 in SRAM.
@@ -59,21 +70,99 @@ static uint32_t image_read_u32(uintptr_t base, uintptr_t offset)
     return *(uint32_t *)(base + offset);
 }
 
+static void uputc(char c)
+{
+    reg_write(UART0, UART_TX, c);
+}
+
+static void uputs(const char *s)
+{
+    for (int i = 0; s[i]; i++) {
+        uputc(s[i]);
+    }
+}
+
+static void uputx(uint32_t x)
+{
+    int ndigits = sizeof(x) * 2;
+
+    uputc('0');
+    uputc('x');
+
+    for (int i = 0; i < ndigits; i++) {
+        uint32_t d = x >> ((ndigits - i - 1) * 4);
+        d &= 0xf;
+        if (0 <= d && d < 10) {
+            uputc('0' + d);
+        } else {
+            uputc('a' + d - 10);
+        }
+    }
+}
+
+static void uprintf(const char *fmt, ...)
+{
+    va_list va;
+    char c;
+    int p = 0;
+
+    va_start(va, fmt);
+    for (int i = 0; (c = fmt[i]); i++) {
+        switch (c) {
+        case '%':
+            p = 1;
+            continue;
+        case 's':
+            if (p) {
+                uputs(va_arg(va, const char*));
+                p = 0;
+                continue;
+            }
+            break;
+        case 'x':
+            if (p) {
+                uputx((uint64_t)va_arg(va, uint64_t));
+                p = 0;
+                continue;
+            }
+            break;
+        }
+
+        uputc(c);
+    }
+    va_end(va);
+}
+
 void copy_boot_image(uintptr_t dest_addr, uintptr_t src_addr, int32_t len)
 {
     uint32_t *dst = (uint32_t *)dest_addr;
     uint32_t *src = (uint32_t *)src_addr;
 
+    uprintf("Copying U-Boot from %x to %x, size %x...", src_addr, dest_addr, len);
     while (len > 0) {
+        if ((len / 4) % 10000 == 0) {
+            uputc('.');
+        }
         *dst++ = *src++;
         len -= sizeof(*dst);
     }
+    uprintf("done.\n");
 }
 
+static const char *splash_screen =
+"             __                                     ____  __ __  ______\n"
+"  ___ _   __/ /_        ____  ____  _________ ___  ( __ )/ // / / ____/\n"
+" / _ \\ | / / __ \\______/ __ \\/ __ \\/ ___/ __ `__ \\/ __  / // /_/___ \\  \n"
+"/  __/ |/ / /_/ /_____/ / / / /_/ / /__/ / / / / / /_/ /__  __/___/ /  \n"
+"\\___/|___/_.___/     /_/ /_/ .___/\\___/_/ /_/ /_/\\____/  /_/ /_____/   \n"
+"                          /_/                                          \n\n";
+
 uintptr_t load_boot_image(void)
 {
     uintptr_t dest_addr = 0x8000;
 
+    uputs(splash_screen);
+
     /* Set CLKSEL to similar values as NPCM7XX */
     reg_write(CLK, CLK_CLKSEL, CLK_CLKSEL_DEFAULT);
 
