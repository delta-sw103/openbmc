From c017d687d35f93fbba76f37d11106432a9afb323 Mon Sep 17 00:00:00 2001
From: Tyrone Ting <kfting@nuvoton.com>
Date: Fri, 23 Sep 2022 09:27:38 +0800
Subject: [PATCH] Load npcm8xx u-boot dynamically.

Reviewed-by: Marvin Lin <kflin@nuvoton.com>
Signed-off-by: Tyrone Ting <kfting@nuvoton.com>
Signed-off-by: Dan Zhang <dz4list@gmail.com>
---
 npcm8xx/image.c | 165 +++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 164 insertions(+), 1 deletion(-)

diff --git a/npcm8xx/image.c b/npcm8xx/image.c
index dcaacc1..9dfb0fa 100644
--- a/npcm8xx/image.c
+++ b/npcm8xx/image.c
@@ -36,6 +36,46 @@ typedef __builtin_va_list va_list;
 #define UART0 0xf0000000
 #define UART_TX 0x00
 
+#define KMT_ANCHOR_OFFSET            0x0
+#define KMT_ANCHOR_VALUE             0x2A3B4D5E
+#define KMT_FWLENGTH_OFFSET          132
+#define KMT_KMTMAP_OFFSET            256
+
+#define TIPFW_L0_ANCHOR_OFFSET       0x0
+#define TIPFW_L0_ANCHOR_VALUE        0x9B7A4D5E
+#define TIPFW_L0_FWLENGTH_OFFSET     0x84
+#define TIPFW_L0_OFFSET              0x100
+
+#define SKMT_ANCHOR_OFFSET           0x0
+#define SKMT_ANCHOR_VALUE            0x0A0D0850746D6B73
+#define SKMT_FWLENGTH_OFFSET         0x1FC
+#define SKMT_OFFSET                  0x200
+
+#define TIPFW_L1_ANCHOR_OFFSET       0x0
+#define TIPFW_L1_ANCHOR_VALUE        0x0A314C5F5049540A
+#define TIPFW_L1_FWLENGTH_OFFSET     0x1FC
+#define TIPFW_L1_OFFSET              0x200
+
+#define BB_ANCHOR_OFFSET             0x0
+#define BB_ANCHOR_VALUE              0x4F4F54AA5508500A
+#define BB_FWLENGTH_OFFSET           0x1FC
+#define BB_OFFSET                    0x200
+
+#define BL31_ANCHOR_OFFSET           0x0
+#define BL31_ANCHOR_VALUE            0x43504E31334C420A
+#define BL31_FWLENGTH_OFFSET         0x1FC
+#define BL31_OFFSET                  0x200
+
+#define TEE_ANCHOR_OFFSET            0x0
+#define TEE_ANCHOR_VALUE             0x43504E5F4545540A
+#define TEE_FWLENGTH_OFFSET          0x1FC
+#define TEE_OFFSET                   0x200
+
+#define UBOOT_ANCHOR_OFFSET          0x0
+#define UBOOT_ANCHOR_VALUE           0x4C42544F4F42550A
+#define UBOOT_FWLENGTH_OFFSET        0x1FC
+#define UBOOT_OFFSET                 0x200
+
 /*
  * This structure must reside at offset 0x100 in SRAM.
  *
@@ -50,6 +90,15 @@ struct rom_status {
     .status = 0x21, /* SPI0 CS0 offset 0 */
 };
 
+struct image_info {
+    uintptr_t base_addr;
+    uintptr_t tag_offset;
+    uintptr_t fwlength_offset;
+    uintptr_t fw_offset;
+    uint64_t tag;
+    uint8_t tag_size;
+} image_info;
+
 extern void panic(const char *);
 
 static void reg_write(uintptr_t base, uintptr_t offset, uint32_t value)
@@ -70,6 +119,11 @@ static uint32_t image_read_u32(uintptr_t base, uintptr_t offset)
     return *(uint32_t *)(base + offset);
 }
 
+static uint64_t image_read_u64(uintptr_t base, uintptr_t offset)
+{
+    return *(uint64_t *)(base + offset);
+}
+
 static void uputc(char c)
 {
     reg_write(UART0, UART_TX, c);
@@ -157,17 +211,126 @@ static const char *splash_screen =
 "\\___/|___/_.___/     /_/ /_/ .___/\\___/_/ /_/ /_/\\____/  /_/ /_____/   \n"
 "                          /_/                                          \n\n";
 
+int32_t get_next_image(struct image_info *image, uintptr_t *target_addr)
+{
+    uint64_t tag = 0;
+    uint32_t value = 0;
+
+    if(image->tag_size == 32)
+	tag = (uint64_t)image_read_u32(SPI0CS0, image->base_addr + image->tag_offset);
+    else if(image->tag_size == 64)
+	tag = image_read_u64(SPI0CS0, image->base_addr + image->tag_offset);
+
+    if (image->tag != tag)
+	return -1;
+
+    value = image_read_u32(SPI0CS0, image->base_addr + image->fwlength_offset);
+    value += image->base_addr + image->fw_offset;
+
+    *target_addr = (uintptr_t)(0xFFFFF000 & (value + 0xFFF));
+    return 0;
+}
+
+int32_t get_uboot_image(uintptr_t *dest_addr, int32_t *len)
+{
+    struct image_info image;
+    uintptr_t image_addr = 0;
+
+    image.base_addr = image_addr;
+    image.tag_offset = KMT_ANCHOR_OFFSET;
+    image.fwlength_offset = KMT_FWLENGTH_OFFSET;
+    image.fw_offset = KMT_KMTMAP_OFFSET;
+    image.tag = KMT_ANCHOR_VALUE;
+    image.tag_size = 32;
+    if(get_next_image(&image, &image_addr))
+	return -1;
+
+    image.base_addr = image_addr;
+    image.tag_offset = TIPFW_L0_ANCHOR_OFFSET;
+    image.fwlength_offset = TIPFW_L0_FWLENGTH_OFFSET;
+    image.fw_offset = TIPFW_L0_OFFSET;
+    image.tag = TIPFW_L0_ANCHOR_VALUE;
+    image.tag_size = 32;
+    if(get_next_image(&image, &image_addr))
+	return -1;
+
+    image.base_addr = image_addr;
+    image.tag_offset = SKMT_ANCHOR_OFFSET;
+    image.fwlength_offset = SKMT_FWLENGTH_OFFSET;
+    image.fw_offset = SKMT_OFFSET;
+    image.tag = SKMT_ANCHOR_VALUE;
+    image.tag_size = 64;
+    if(get_next_image(&image, &image_addr))
+	return -1;
+
+    image.base_addr = image_addr;
+    image.tag_offset = TIPFW_L1_ANCHOR_OFFSET;
+    image.fwlength_offset = TIPFW_L1_FWLENGTH_OFFSET;
+    image.fw_offset = TIPFW_L1_OFFSET;
+    image.tag = TIPFW_L1_ANCHOR_VALUE;
+    image.tag_size = 64;
+    if(get_next_image(&image, &image_addr))
+	return -1;
+
+    image.base_addr = image_addr;
+    image.tag_offset = BB_ANCHOR_OFFSET;
+    image.fwlength_offset = BB_FWLENGTH_OFFSET;
+    image.fw_offset = BB_OFFSET;
+    image.tag = BB_ANCHOR_VALUE;
+    image.tag_size = 64;
+    if(get_next_image(&image, &image_addr))
+	return -1;
+
+    image.base_addr = image_addr;
+    image.tag_offset = BL31_ANCHOR_OFFSET;
+    image.fwlength_offset = BL31_FWLENGTH_OFFSET;
+    image.fw_offset = BL31_OFFSET;
+    image.tag = BL31_ANCHOR_VALUE;
+    image.tag_size = 64;
+    if(get_next_image(&image, &image_addr))
+	return -1;
+
+    image.base_addr = image_addr;
+    image.tag_offset = TEE_ANCHOR_OFFSET;
+    image.fwlength_offset = TEE_FWLENGTH_OFFSET;
+    image.fw_offset = TEE_OFFSET;
+    image.tag = TEE_ANCHOR_VALUE;
+    image.tag_size = 64;
+    if(get_next_image(&image, &image_addr))
+	return -1;
+
+    //It's expected to be the UBoot start adderess.
+    *dest_addr = image_addr;
+    *len = image_read_u32(SPI0CS0, image_addr + UBOOT_FWLENGTH_OFFSET);
+
+    image.base_addr = image_addr;
+    image.tag_offset = UBOOT_ANCHOR_OFFSET;
+    image.fwlength_offset = UBOOT_FWLENGTH_OFFSET;
+    image.fw_offset = UBOOT_OFFSET;
+    image.tag = UBOOT_ANCHOR_VALUE;
+    image.tag_size = 64;
+    if(get_next_image(&image, &image_addr))
+	return -1;
+
+    return 0;
+}
+
 uintptr_t load_boot_image(void)
 {
     uintptr_t dest_addr = 0x8000;
+    uintptr_t image_addr = 0;
+    uint32_t len = 0;
 
     uputs(splash_screen);
 
     /* Set CLKSEL to similar values as NPCM7XX */
     reg_write(CLK, CLK_CLKSEL, CLK_CLKSEL_DEFAULT);
 
+    if(get_uboot_image(&image_addr, &len))
+	return 0;
+
     /* Load the U-BOOT image to DRAM */
-    copy_boot_image(dest_addr, SPI0CS0 + 0x20200, 0xa6e80);
+    copy_boot_image(dest_addr, SPI0CS0 + image_addr + UBOOT_OFFSET, len);
     /* Set FIU to use 4 byte mode, similar to what TIP does in reality. */
     reg_write(FIU0, FIU_DRD_CFG, 0x0301100b);
 
